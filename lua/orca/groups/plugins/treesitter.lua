local C = require 'orca.colors'
local U = require 'orca.utils'

return { 
	-- Treesitter
	["@annotation"] = { fg = C.white_grey.comment_grey },
	["@attribute"] = { fg = C.purple.base },
	["@boolean"] = { fg = C.purple.base },
	["@character"] = { fg = C.green.base },
	["@character.special"] = { fg = C.red.bright },
	["@comment"] = { fg = C.white_grey.comment_grey },
	["@conditional"] = { fg = C.blue.dark },
	["@constant"] = { fg = C.orange.base },
	["@constant.builtin"] = { fg = C.orange.base },
	-- ["@constant.macro"] = { fg = C.red.base },
	["@constructor"] = { fg = C.cyan.base },
	["@debug"] = { fg = C.red.base },
	["@define"] = { fg = C.red.base },
	["@exception"] = { fg = C.red.base },
	["@field"] = { fg = C.fg },
	["@float"] = { fg = C.cyan.base },
	["@function"] = { fg = C.yellow.base, italic = true },
	["@function.builtin"] = { fg = C.cyan.base, italic = true },
	["@function.call"] = { fg = C.yellow.base, italic = true },
	["@function.macro"] = { fg = C.blue.base },
	["@include"] = { fg = C.purple.base },
	["@keyword"] = { fg = C.blue.base },
	-- ["@keyword.coroutine"] = { fg = C.red.base },
	["@keyword.function"] = { fg = C.blue.base },
	["@keyword.operator"] = { fg = C.red.base },
	["@keyword.return"] = { fg = C.purple.base },
	["@label"] = { fg = C.blue.bright },
	["@method"] = { fg = C.green.base },
	["@method.call"] = { fg = C.green.base },
	["@namespace"] = { fg = C.fg},
	["@none"] = { fg = C.red.base },
	["@number"] = { fg = C.orange.base },
	["@operator"] = { fg = C.red.base },
	["@parameter"] = { fg = C.fg },
	["@preproc"] = { fg = C.blue.dark },
	["@property"] = { fg = C.fg },
	["@punctuation.bracket"] = { fg = C.fg },
	["@punctuation.delimiter"] = { fg = C.red.base },
	["@punctuation.special"] = { fg = C.orange.base },
	["@repeat"] = { fg = C.purple.base },
	["@storageclass"] = { fg = C.blue.dark },
	["@string"] = { fg = C.green.base },
	["@string.escape"] = { fg = C.orange.base },
	["@string.regex"] = { fg = C.purple.base },
	["@string.special"] = { fg = C.yellow.base },
	["@symbol"] = { fg = C.fg },
	["@tag"] = { fg = C.blue.base },
	["@tag.attribute"] = { fg = C.fg },
	["@tag.delimiter"] = { fg = C.red.base },
	["@text"] = { fg = C.fg },
	["@text.danger"] = { fg = C.red.bright },
	["@text.emphasis"] = { fg = C.yellow.base, bold = true },
	["@text.environment"] = { fg = C.blue.base },
	["@text.environment.name"] = { fg = C.blue.bright },
	["@text.literal"] = { fg = C.cyan.base },
	["@text.math"] = { fg = C.fg },
	["@text.note"] = { fg = C.white_grey.comment_grey },
	["@text.reference"] = { fg = C.green.base },
	["@text.strike"] = { fg = C.red.base },
	["@text.title"] = { fg = C.blue.base, bold = true },
	["@text.underline"] = { fg = C.blue.bright },
	["@text.uri"] = { fg = C.purple.base },
	["@text.warning"] = { fg = C.yellow.bright, bg = U.darken(C.yellow.bright, 0.7)},
	["@text.todo"] = {  fg = C.red.bright, bg = U.darken(C.red.bright, 0.7)},
	["@type"] = { fg = C.blue.bright },
	-- ["@type.builtin"] = { fg = C.blue.bright },
	-- ["@type.definition"] = { fg = C.blue.bright },
	["@type.qualifier"] = { fg = C.purple.base },
	["@variable"] = { fg = C.fg, bold = true },
	["@variable.builtin"] = { fg = C.cyan.base },

	["@lsp.type.boolean"] = { link = "@boolean" },
    ["@lsp.type.builtinType"] = { link = "@type.builtin" },
    ["@lsp.type.comment"] = { link = "@comment" },
    ["@lsp.type.decorator"] = { link = "@attribute" },
    ["@lsp.type.deriveHelper"] = { link = "@attribute" },
    ["@lsp.type.enum"] = { link = "@type" },
    ["@lsp.type.enumMember"] = { link = "@constant" },
    ["@lsp.type.escapeSequence"] = { link = "@string.escape" },
    ["@lsp.type.formatSpecifier"] = { link = "@punctuation.special" },
    ["@lsp.type.generic"] = { link = "@variable" },
    ["@lsp.type.interface"] = { fg = C.blue.base },
    ["@lsp.type.keyword"] = { link = "@keyword" },
    ["@lsp.type.lifetime"] = { link = "@storageclass" },
    ["@lsp.type.namespace"] = { link = "@namespace" },
    ["@lsp.type.number"] = { link = "@number" },
    ["@lsp.type.operator"] = { link = "@operator" },
    ["@lsp.type.parameter"] = { link = "@parameter" },
    ["@lsp.type.property"] = { link = "@property" },
    ["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
    ["@lsp.type.selfTypeKeyword"] = { link = "@variable.builtin" },
    ["@lsp.type.string"] = { link = "@string" },
    ["@lsp.type.typeAlias"] = { link = "@type.definition" },
    ["@lsp.type.unresolvedReference"] = { undercurl = true, sp = C.red.bright },
    ["@lsp.type.variable"] = {}, -- use treesitter styles for regular variables
    ["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
    ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.keyword.async"] = { link = "@keyword.coroutine" },
    ["@lsp.typemod.keyword.injected"] = { link = "@keyword" },
    ["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.operator.injected"] = { link = "@operator" },
    ["@lsp.typemod.string.injected"] = { link = "@string" },
    ["@lsp.typemod.struct.defaultLibrary"] = { link = "@type.builtin" },
    ["@lsp.typemod.type.defaultLibrary"] = { fg = C.purple.base },
    ["@lsp.typemod.typeAlias.defaultLibrary"] = { fg = C.purple.base},
    ["@lsp.typemod.variable.callable"] = { link = "@function" },
    ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
    ["@lsp.typemod.variable.injected"] = { link = "@variable" },
    ["@lsp.typemod.variable.static"] = { link = "@constant" },
	-- Treesitter refactor
	TSDefinition = {fg = C.fg, bg = U.darken(C.yellow.bright, 0.4), bold = true},
	TSDefinitionUsage = {sp = C.yellow.bright, underline=true},
}
